const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

class ExcelReporter {
    constructor() {
        this.testResults = [];
        this.startTime = new Date();
        this.resultsDir = path.join(__dirname, '..', 'results');
        
        // ƒê·∫£m b·∫£o th∆∞ m·ª•c results t·ªìn t·∫°i
        if (!fs.existsSync(this.resultsDir)) {
            fs.mkdirSync(this.resultsDir, { recursive: true });
        }
    }

    // Th√™m k·∫øt qu·∫£ test
    addTestResult(testData) {
        const result = {
            'STT': this.testResults.length + 1,
            'T√™n Test Case': testData.testName || 'N/A',
            'M√¥ t·∫£': testData.description || 'N/A',
            'K·∫øt qu·∫£': testData.status || 'N/A', // PASSED, FAILED, SKIPPED
            'Th·ªùi gian th·ª±c hi·ªán (ms)': testData.duration || 0,
            'Th√¥ng b√°o l·ªói': testData.errorMessage || '',
            'URL ki·ªÉm tra': testData.url || '',
            'Th·ªùi gian b·∫Øt ƒë·∫ßu': testData.startTime || new Date().toISOString(),
            'Th·ªùi gian k·∫øt th√∫c': testData.endTime || new Date().toISOString(),
            'Tr√¨nh duy·ªát': testData.browser || 'N/A',
            'D·ªØ li·ªáu ƒë·∫ßu v√†o': testData.inputData || '',
            'K·∫øt qu·∫£ mong ƒë·ª£i': testData.expectedResult || '',
            'K·∫øt qu·∫£ th·ª±c t·∫ø': testData.actualResult || '',
            'Screenshot': testData.screenshot || ''
        };
        
        this.testResults.push(result);
        console.log(`‚úÖ ƒê√£ th√™m k·∫øt qu·∫£ test: ${result['T√™n Test Case']} - ${result['K·∫øt qu·∫£']}`);
    }

    // Xu·∫•t k·∫øt qu·∫£ ra file Excel
    exportToExcel(fileName) {
        try {
            if (this.testResults.length === 0) {
                console.log('‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt qu·∫£ test n√†o ƒë·ªÉ xu·∫•t');
                return null;
            }

            // T·∫°o workbook m·ªõi
            const workbook = XLSX.utils.book_new();
            
            // T·∫°o worksheet t·ª´ d·ªØ li·ªáu
            const worksheet = XLSX.utils.json_to_sheet(this.testResults);
            
            // Th√™m worksheet v√†o workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Test Results');
            
            // T·∫°o worksheet t·ªïng k·∫øt
            const summary = this.generateSummary();
            const summaryWorksheet = XLSX.utils.json_to_sheet(summary);
            XLSX.utils.book_append_sheet(workbook, summaryWorksheet, 'T·ªïng k·∫øt');
            
            // T·∫°o t√™n file v·ªõi timestamp n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
            if (!fileName) {
                const timestamp = new Date().toISOString()
                    .replace(/[:.]/g, '-')
                    .replace('T', '_')
                    .split('.')[0];
                fileName = `test-results_${timestamp}.xlsx`;
            }
            
            // ƒê·∫£m b·∫£o file c√≥ extension .xlsx
            if (!fileName.endsWith('.xlsx')) {
                fileName += '.xlsx';
            }
            
            const filePath = path.join(this.resultsDir, fileName);
            
            // Ghi file
            XLSX.writeFile(workbook, filePath);
            
            console.log(`üìä ƒê√£ xu·∫•t k·∫øt qu·∫£ test ra file: ${filePath}`);
            console.log(`üìà T·ªïng s·ªë test cases: ${this.testResults.length}`);
            
            return filePath;
        } catch (error) {
            console.error('‚ùå L·ªói khi xu·∫•t file Excel:', error.message);
            return null;
        }
    }

    // T·∫°o b·∫£ng t·ªïng k·∫øt
    generateSummary() {
        const total = this.testResults.length;
        const passed = this.testResults.filter(r => r['K·∫øt qu·∫£'] === 'PASSED').length;
        const failed = this.testResults.filter(r => r['K·∫øt qu·∫£'] === 'FAILED').length;
        const skipped = this.testResults.filter(r => r['K·∫øt qu·∫£'] === 'SKIPPED').length;
        
        const totalDuration = this.testResults.reduce((sum, r) => sum + (r['Th·ªùi gian th·ª±c hi·ªán (ms)'] || 0), 0);
        const endTime = new Date();
        const totalTestTime = endTime - this.startTime;
        
        return [
            { 'Th√¥ng tin': 'T·ªïng s·ªë Test Cases', 'Gi√° tr·ªã': total },
            { 'Th√¥ng tin': 'Passed', 'Gi√° tr·ªã': passed },
            { 'Th√¥ng tin': 'Failed', 'Gi√° tr·ªã': failed },
            { 'Th√¥ng tin': 'Skipped', 'Gi√° tr·ªã': skipped },
            { 'Th√¥ng tin': 'T·ª∑ l·ªá th√†nh c√¥ng (%)', 'Gi√° tr·ªã': total > 0 ? ((passed / total) * 100).toFixed(2) : 0 },
            { 'Th√¥ng tin': 'Th·ªùi gian b·∫Øt ƒë·∫ßu', 'Gi√° tr·ªã': this.startTime.toLocaleString('vi-VN') },
            { 'Th√¥ng tin': 'Th·ªùi gian k·∫øt th√∫c', 'Gi√° tr·ªã': endTime.toLocaleString('vi-VN') },
            { 'Th√¥ng tin': 'T·ªïng th·ªùi gian test (ph√∫t)', 'Gi√° tr·ªã': (totalTestTime / 60000).toFixed(2) },
            { 'Th√¥ng tin': 'T·ªïng th·ªùi gian th·ª±c hi·ªán (ms)', 'Gi√° tr·ªã': totalDuration }
        ];
    }

    // Reset d·ªØ li·ªáu
    reset() {
        this.testResults = [];
        this.startTime = new Date();
        console.log('üîÑ ƒê√£ reset d·ªØ li·ªáu test results');
    }

    // L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£
    getAllResults() {
        return this.testResults;
    }

    // L·∫•y t·ªïng k·∫øt
    getSummary() {
        return this.generateSummary();
    }
}

module.exports = ExcelReporter;
